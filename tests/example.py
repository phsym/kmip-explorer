import os
import pprint

from kmip.pie import objects
from kmip.pie.client import CryptographicParameters, ProxyKmipClient, enums

# ADDR   = "eu-west-rbx.okms.ovh.net"
# PORT   = "5696"
# CA     = "./certs/prod/ca.pem"
# CERT   = "./certs/prod/cert.pem"
# KEY    = "./certs/prod/key.pem"

ADDR   = "127.0.0.1"
PORT   = "5696"
CA     = "root_certificate.pem"
CERT   = "client_certificate_john_doe.pem"
KEY    = "client_key_john_doe.pem"

def main():
    print("starting")
    client = ProxyKmipClient(
        hostname= ADDR,
        port = PORT,
        cert=CERT,
        key=KEY,
        ca=CA,
        kmip_version=enums.KMIPVersion.KMIP_1_4,
    )
    client.open()

    try:
        # Generate or load an AES 256 bits key 
        key = os.urandom(32)
        pprint.pprint(key)

        # Create a managed object of type SymmetricKey
        key = objects.SymmetricKey(
            algorithm = enums.CryptographicAlgorithm.AES, 
            length = 256,
            value=key,
            masks=[enums.CryptographicUsageMask.ENCRYPT , enums.CryptographicUsageMask.DECRYPT],
            name="demo import AES python"
        )

        # Register the key and save its ID into a variable
        key_id = client.register(key)

        client.get(key_id)

        # Alternatively, the key can be generated by the KMS server
        # client.create(enums.CryptographicAlgorithm.AES, 256, name = "demo pykmip", cryptographic_usage_mask = [enums.CryptographicUsageMask.ENCRYPT , enums.CryptographicUsageMask.DECRYPT])

        # Get the all the key attributes
        attrs = client.get_attributes(key_id)
        pprint.pprint(attrs)

        # Extract the key value
        key = client.get(key_id)
        pprint.pprint(key.value)

        client.activate(key_id)
        
        print("Encrypt")
        res = client.encrypt(b"hello world", key_id, {
            "cryptographic_algorithm": enums.CryptographicAlgorithm.AES,
            "block_cipher_mode": enums.BlockCipherMode.GCM,
            "tag_length": 12,
        })
        pprint.pprint(res)
    finally:
        client.close()

if __name__ == "__main__":
    main()